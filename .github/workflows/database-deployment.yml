name: iods-auto-deploy

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  database-deployment:
    runs-on: windows-latest
    env:
      SQL_SERVER_DATA: ""
      SQL_USER: ""
      SQL_PASSWORD: ""
      SQL_DATABASE: ""
      PATH_RELEASE_IODS: ""

    steps:
      - name: ‚öôÔ∏è Checkout code
        uses: actions/checkout@v3

      - name: üìÑ Load configuration from JSON
        shell: pwsh
        id: load_config
        run: |
          # read JSON file
          $config = Get-Content -Raw -Path "config.json" | ConvertFrom-Json
          
          # Check JSON file
          Write-Output "Config Loaded: $($config | ConvertTo-Json -Depth 3)"

          $SQL_SERVER_DATA = $config.SQL_SERVER_DATA
          $SQL_USER = $config.SQL_USER
          $SQL_PASSWORD = $config.SQL_PASSWORD
          $SQL_DATABASE = $config.SQL_DATABASE
          $PATH_RELEASE_IODS = $config.PATH_RELEASE_IODS

          # Assign JSON values to environment variables
          Add-Content -Path $env:GITHUB_ENV -Value "SQL_SERVER_DATA=$SQL_SERVER_DATA"
          Add-Content -Path $env:GITHUB_ENV -Value "SQL_USER=$SQL_USER"
          Add-Content -Path $env:GITHUB_ENV -Value "SQL_PASSWORD=$SQL_PASSWORD"
          Add-Content -Path $env:GITHUB_ENV -Value "SQL_DATABASE=$SQL_DATABASE"
          Add-Content -Path $env:GITHUB_ENV -Value "PATH_RELEASE_IODS=$PATH_RELEASE_IODS"

      - name: üìù Verify environment variables
        shell: pwsh
        run: |
          Write-Output "SQL_SERVER_DATA: $env:SQL_SERVER_DATA"
          Write-Output "SQL_USER: $env:SQL_USER"
          Write-Output "SQL_PASSWORD: $env:SQL_PASSWORD"
          Write-Output "SQL_DATABASE: $env:SQL_DATABASE"
          Write-Output "PATH_RELEASE_IODS: $env:PATH_RELEASE_IODS"       
              
      - name: üõ†Ô∏è Install SQL Server tools
        run: choco install sqlcmd

      - name: üîç Check Database Connection
        shell: pwsh
        run: |
          try {
            Write-Output "Checking database connection..."
            $output = sqlcmd -S $env:SQL_SERVER_DATA -U $env:SQL_USER -P $env:SQL_PASSWORD -Q "SELECT 1" 2>&1
            if ($output -match 'Msg \d+, Level \d+, State \d+, Server .+, Line \d+') {
              Write-Error "‚ùå Database connection failed: $output"
              exit 1
            }
            Write-Output "‚úÖ Database connection successful"
          } catch {
            Write-Error "‚ùå Failed to check database connection: $($_.Exception.Message)"
            exit 1
          }
           
      - name: üèÉ‚Äç‚ôÇÔ∏è‚Äç‚û°Ô∏è Execute SQL Scripts in Order
        shell: pwsh
        run: |     
            $folders = Get-ChildItem -Path $env:PATH_RELEASE_IODS -Recurse -Directory | Sort-Object FullName
            
            foreach ($folder in $folders) {
              if ($folder.Name -notmatch '^\d') {
                Write-Output "Skipping folder (no number in name): $($folder.FullName)"
                continue
              }
              Write-Output "Processing folder: $($folder.FullName)"
              $sqlFiles = Get-ChildItem -Path $folder.FullName -Filter *.sql | Sort-Object Name
            
              foreach ($file in $sqlFiles) {            
                try {
                  Write-Output "Executing $($file.FullName)..."
                  $output = sqlcmd -S $env:SQL_SERVER_DATA -U $env:SQL_USER -P $env:SQL_PASSWORD -d $env:SQL_DATABASE -i $file.FullName 2>&1
                  Write-Output "Result of $($file.Name):"
                  if ($output -match 'Msg \d+, Level \d+, State \d+, Server .+, Line \d+') {
                    Write-Output "‚ùóError executing $($file.Name): $output"
                  } 
                  else {
                    Write-Output "‚úÖ Successfully executed $($file.Name)"
                  }
                } catch {
                  Write-Error "‚ùå Failed to execute $($file.Name): $($_.Exception.Message)"
                }
              }
            }
  
  api-deployment:
    runs-on: windows-latest
    needs: database-deployment 
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
    
      - name: Deploy API to IIS
        run: |
          echo "Desplegando API en IIS..."