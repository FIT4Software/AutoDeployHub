name: CI

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  connect-sql-server:
    runs-on: windows-latest

    steps:
      - name: ‚öôÔ∏è Checkout code
        uses: actions/checkout@v2

      - name: üõ†Ô∏è Install SQL Server tools 
        run: choco install sqlcmd

      - name: üèÉ‚Äç‚ôÇÔ∏è‚Äç‚û°Ô∏è Execute SQL Scripts in Order 
        shell: pwsh
        env:
          SQL_SERVER: ${{ secrets.SQL_SERVER }}
          SQL_USER: ${{ secrets.SQL_USER }}
          SQL_PASSWORD: ${{ secrets.SQL_PASSWORD }}
          SQL_DATABASE: ${{ secrets.SQL_DATABASE }}
        run: |
          # Get all folders and subfolders sorted in ascending order.
          $folders = Get-ChildItem -Path "220 - SQL" -Recurse -Directory | Sort-Object FullName
      
          foreach ($folder in $folders) {

             # Check if the folder name contains a number
            if ($folder.Name -notmatch '\d') {
              Write-Output "Skipping folder (no number in name): $($folder.FullName)"
              continue
            }

            Write-Output "Processing folder: $($folder.FullName)"
      
            # Get and sort the SQL files in each folder
            $sqlFiles = Get-ChildItem -Path $folder.FullName -Filter *.sql | Sort-Object Name
      
            foreach ($file in $sqlFiles) {            
              try {
                Write-Output "------------------------------------------------start-------------------------------------------------------"
                Write-Output "Executing $($file.FullName)..."
      
                # Capture the output of sqlcmd
                $output = sqlcmd -S $env:SQL_SERVER -U $env:SQL_USER -P $env:SQL_PASSWORD -d $env:SQL_DATABASE -i $file.FullName 2>&1
      
                # Print the output for visibility
                Write-Output "Result of $($file.Name):"
                # Write-Output $output
      
                # Check for errors in the output
                if ($output -match 'Msg \d+, Level \d+, State \d+, Server .+, Line \d+') {
                  Write-Error "‚ùóError executing $($file.Name): $output"
                } else {
                  Write-Output "‚úÖ Successfully executed $($file.Name)"
                }
              } catch {
                Write-Error "‚ùå Failed to execute $($file.Name): $($_.Exception.Message)"
              }
              Write-Output "------------------------------------------------end---------------------------------------------------------"
            }
          }
