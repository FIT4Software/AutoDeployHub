name: CI

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  connect-sql-server:
    runs-on: windows-latest

    env:
      SQL_SERVER_DATA: ""
      SQL_USER: ""
      SQL_PASSWORD: ""
      SQL_DATABASE: ""

    steps:
      - name: ‚öôÔ∏è Checkout code
        uses: actions/checkout@v2

      - name: üìÑ Load configuration from JSON
        shell: pwsh
        id: load_config
        run: |
          # Leer archivo JSON
          $config = Get-Content -Raw -Path "Config.json" | ConvertFrom-Json
          
          # Verificar el contenido del archivo JSON
          Write-Output "Config Loaded: $config"

          # Exportar valores como variables de entorno
          $env:SQL_SERVER_DATA = $config.SQL_SERVER_DATA
          $env:SQL_USER = $config.SQL_USER
          $env:SQL_PASSWORD = $config.SQL_PASSWORD
          $env:SQL_DATABASE = $config.SQL_DATABASE
          

      - name: üõ†Ô∏è Install SQL Server tools
        run: choco install sqlcmd
      
      - name: üèÉ‚Äç‚ôÇÔ∏è‚Äç‚û°Ô∏è Execute SQL Scripts in Order
        shell: pwsh
        # env:
        #   SQL_SERVER_DATA: ${{ secrets.SQL_SERVER }}
        #   SQL_USER: ${{ secrets.SQL_USER }}
        #   SQL_PASSWORD: ${{ secrets.SQL_PASSWORD }}
        #   SQL_DATABASE: ${{ secrets.SQL_DATABASE }}
        run: |     
          # Continuar con la ejecuci√≥n de los scripts SQL
          $folders = Get-ChildItem -Path "220 - SQL" -Recurse -Directory | Sort-Object FullName
      
          foreach ($folder in $folders) {
            if ($folder.Name -notmatch '^\d') {
              Write-Output "Skipping folder (no number in name): $($folder.FullName)"
              continue
            }
            Write-Output "Processing folder: $($folder.FullName)"
            $sqlFiles = Get-ChildItem -Path $folder.FullName -Filter *.sql | Sort-Object Name
      
            foreach ($file in $sqlFiles) {            
              try {
                Write-Output "Executing $($file.FullName)..."
                $output = sqlcmd -S $env:SQL_SERVER_DATA -U $env:SQL_USER -P $env:SQL_PASSWORD -d $env:SQL_DATABASE -i $file.FullName 2>&1
                Write-Output "Result of $($file.Name):"
                if ($output -match 'Msg \d+, Level \d+, State \d+, Server .+, Line \d+') {
                  Write-Output "‚ùóError executing $($file.Name): $output"
                } 
                else {
                  Write-Output "‚úÖ Successfully executed $($file.Name)"
                }
              } catch {
                Write-Error "‚ùå Failed to execute $($file.Name): $($_.Exception.Message)"
              }
            }
          }