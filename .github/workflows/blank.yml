name: CI

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  connect-sql-server:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install SQL Server tools
        run: choco install sqlcmd

      - name: Execute SQL Scripts in Order
        shell: pwsh
        env:
          SQL_SERVER: ${{ secrets.SQL_SERVER }}
          SQL_USER: ${{ secrets.SQL_USER }}
          SQL_PASSWORD: ${{ secrets.SQL_PASSWORD }}
          SQL_DATABASE: ${{ secrets.SQL_DATABASE }}
        run: |
          # Initialize log file
          $logFile = "execution_log.txt"
          if (Test-Path $logFile) { Remove-Item $logFile }  # Clear previous log if exists
          "Execution Log - $(Get-Date)" | Out-File -FilePath $logFile -Encoding utf8 -Append

          # Get all folders and subfolders sorted in ascending order
          $folders = Get-ChildItem -Path "220 - SQL" -Recurse -Directory | Sort-Object FullName

          foreach ($folder in $folders) {
            $folderMessage = "Processing folder: $($folder.FullName)"
            Write-Output $folderMessage
            $folderMessage | Out-File -FilePath $logFile -Encoding utf8 -Append

            # Get and sort the SQL files in each folder
            $sqlFiles = Get-ChildItem -Path $folder.FullName -Filter *.sql | Sort-Object Name

            foreach ($file in $sqlFiles) {
              try {
                $fileMessage = "Executing $($file.FullName)..."
                Write-Output $fileMessage
                $fileMessage | Out-File -FilePath $logFile -Encoding utf8 -Append

                # Capture the output of sqlcmd
                $output = sqlcmd -S $env:SQL_SERVER -U $env:SQL_USER -P $env:SQL_PASSWORD -d $env:SQL_DATABASE -i $file.FullName 2>&1

                # Log the result
                $successMessage = "Result of $($file.Name): $output"
                Write-Output $successMessage
                $successMessage | Out-File -FilePath $logFile -Encoding utf8 -Append

                # Check for errors in the output
                if ($LASTEXITCODE -ne 0) {
                  $errorMessage = "Error executing $($file.Name): $output"
                  Write-Error $errorMessage
                  $errorMessage | Out-File -FilePath $logFile -Encoding utf8 -Append
                } else {
                  $successMessage = "Successfully executed $($file.Name)"
                  Write-Output $successMessage
                  $successMessage | Out-File -FilePath $logFile -Encoding utf8 -Append
                }
              } catch {
                $exceptionMessage = "Failed to execute $($file.Name): $($_.Exception.Message)"
                Write-Error $exceptionMessage
                $exceptionMessage | Out-File -FilePath $logFile -Encoding utf8 -Append
              }
            }
          }

          # Final log message
          "Execution completed at $(Get-Date)" | Out-File -FilePath $logFile -Encoding utf8 -Append
