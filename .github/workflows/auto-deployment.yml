name: iods-auto-deploy

on:
  push:
    branches: ["API-1"]
  workflow_dispatch:

jobs:
  database-deployment:
    runs-on: windows-latest
    env:
      SQL_SERVER_DATA: ""
      SQL_USER: ""
      SQL_PASSWORD: ""
      SQL_DATABASE_IODS: ""
      PATH_RELEASE_IODS: ""
      SQL_DATABASE_PROFICY: ""
      PATH_RELEASE_PROFICY: ""
      SCHEDULE_TASKS_JSON: ""
      IODS_API: ""

    steps:
      - name: ⚙️ Checkout code
        uses: actions/checkout@v3

      - name: 📄 Load configuration from JSON
        shell: pwsh
        id: load_config
        run: |
          # read JSON file
          $config = Get-Content -Raw -Path "config.json" | ConvertFrom-Json

          # Check JSON file
          Write-Output "Config Loaded: $($config | ConvertTo-Json -Depth 3)"

          $SQL_SERVER_DATA = $config.SQL_SERVER_DATA
          $SQL_USER = $config.SQL_USER
          $SQL_PASSWORD = $config.SQL_PASSWORD
          $SQL_DATABASE_IODS = $config.SQL_DATABASE_IODS
          $PATH_RELEASE_IODS = $config.PATH_RELEASE_IODS
          $SQL_DATABASE_PROFICY = $config.SQL_DATABASE_PROFICY
          $PATH_RELEASE_PROFICY = $config.PATH_RELEASE_PROFICY

          # Assign JSON values to environment variables
          Add-Content -Path $env:GITHUB_ENV -Value "SQL_SERVER_DATA=$SQL_SERVER_DATA"
          Add-Content -Path $env:GITHUB_ENV -Value "SQL_USER=$SQL_USER"
          Add-Content -Path $env:GITHUB_ENV -Value "SQL_PASSWORD=$SQL_PASSWORD"
          Add-Content -Path $env:GITHUB_ENV -Value "SQL_DATABASE_IODS=$SQL_DATABASE_IODS"
          Add-Content -Path $env:GITHUB_ENV -Value "PATH_RELEASE_IODS=$PATH_RELEASE_IODS"
          Add-Content -Path $env:GITHUB_ENV -Value "SQL_DATABASE_PROFICY=$SQL_DATABASE_PROFICY"
          Add-Content -Path $env:GITHUB_ENV -Value "PATH_RELEASE_PROFICY=$PATH_RELEASE_PROFICY"

      - name: 📝 Verify environment variables
        shell: pwsh
        run: |
          Write-Output "SQL_SERVER_DATA: $env:SQL_SERVER_DATA"
          Write-Output "SQL_USER: $env:SQL_USER"
          Write-Output "SQL_PASSWORD: $env:SQL_PASSWORD"
          Write-Output "SQL_DATABASE_IODS: $env:SQL_DATABASE_IODS"
          Write-Output "PATH_RELEASE_IODS: $env:PATH_RELEASE_IODS"  
          Write-Output "SQL_DATABASE_PROFICY: $env:SQL_DATABASE_PROFICY"
          Write-Output "PATH_RELEASE_PROFICY: $env:PATH_RELEASE_PROFICY"

      - name: 🛠️ Install SQL Server tools
        run: choco install sqlcmd

      - name: 🔍 Check Server Connection
        shell: pwsh
        run: |
          try {
            Write-Output "Checking database connection..."
            $output = sqlcmd -S $env:SQL_SERVER_DATA -U $env:SQL_USER -P $env:SQL_PASSWORD -Q "SELECT 1" 2>&1
            if ($output -match 'Msg \d+, Level \d+, State \d+, Server .+, Line \d+') {
              Write-Error "❌ Database connection failed: $output"
              exit 1
            }
            Write-Output "✅ Database connection successful"
          } catch {
            Write-Error "❌ Failed to check database connection: $($_.Exception.Message)"
            exit 1
          }

      - name: 🔌Check Auto_opsDataStore Database Connection
        shell: pwsh
        run: |
          try {
            Write-Output "Checking Auto_opsDataStore database connection..."
            $output = sqlcmd -S $env:SQL_SERVER_DATA -U $env:SQL_USER -P $env:SQL_PASSWORD -d $env:SQL_DATABASE_IODS -Q "SELECT 1" 2>&1
            if ($output -match 'Msg \d+, Level \d+, State \d+, Server .+, Line \d+') {
              Write-Output "❗Database connection failed: $output"
              exit 1
            }
            Write-Output "✅ Auto_opsDataStore Database connection successful"
          } catch {
            Write-Output "❗Failed to check Auto_opsDataStore database connection: $($_.Exception.Message)"
            exit 1
          }

      - name: 🔌Check GBDB Database Connection
        shell: pwsh
        run: |
          try {
            Write-Output "Checking GBDB database connection..."
            $output = sqlcmd -S $env:SQL_SERVER_DATA -U $env:SQL_USER -P $env:SQL_PASSWORD -d $env:SQL_DATABASE_PROFICY -Q "SELECT 1" 2>&1
            if ($output -match 'Msg \d+, Level \d+, State \d+, Server .+, Line \d+') {
              Write-Output "❗Database connection failed: $output"
              exit 1
            }
            Write-Output "✅ GBDB Database connection successful"
          } catch {
            Write-Output "❗Failed to check GBDB database connection: $($_.Exception.Message)"
            exit 1
          }

      - name: 📥 Save ScheduleTaskManager to JSON and Deactivate Tasks
        shell: pwsh
        run: |
          try {
                Write-Output "Fetching data from ScheduleTaskManager..."
              
                # Define the path for the JSON file
                $jsonFile = Join-Path $PWD "ScheduleTaskManager.json"
              
                # Execute the SELECT query and convert the result to JSON
                $query = "SELECT * FROM ScheduleTaskManager FOR JSON AUTO"
                $output = sqlcmd -S $env:SQL_SERVER_DATA -U $env:SQL_USER -P $env:SQL_PASSWORD -d $env:SQL_DATABASE_IODS -Q $query -h -1 -W | Where-Object { $_ -notmatch 'rows affected' }

                # Check for errors in the SQL query execution
                if ($output -match 'Msg \d+, Level \d+, State \d+, Server .+, Line \d+') {
                    Write-Error "❌ Error fetching data: $output"
                    exit 1
                }

                # Convert output to JSON format
                $jsonContentRaw = $output -join "`n"

                # Save the output to a JSON file
                $jsonContentRaw | Out-File -Encoding utf8 $jsonFile
                Write-Output "✅ Data exported successfully to $jsonFile"

                # Save the JSON content in a GitHub Actions environment variable
                "SCHEDULE_TASKS_JSON=$jsonContentRaw" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

                # Print confirmation message
                Write-Output "📂 JSON stored in GitHub Actions environment variable: SCHEDULE_TASKS_JSON"
                            
                # Execute the UPDATE query to set Active column to 0 (deactivate tasks)
                Write-Output "Deactivating tasks by updating Active column to 0..."
                $updateQuery = "UPDATE ScheduleTaskManager SET Active = 0"
                $updateOutput = sqlcmd -S $env:SQL_SERVER_DATA -U $env:SQL_USER -P $env:SQL_PASSWORD -d $env:SQL_DATABASE_IODS -Q $updateQuery
              
                # Check for errors in the update execution
                if ($updateOutput -match 'Msg \d+, Level \d+, State \d+, Server .+, Line \d+') {
                    Write-Error "❌ Error deactivating tasks: $updateOutput"
                    exit 1
                }             
                Write-Output "✅ Tasks deactivated successfully"
            } 
            catch {
                # Handle any unexpected errors
                Write-Error "❌ Failed to process ScheduleTaskManager: $($_.Exception.Message)"
                exit 1
            }

      - name: 🏃‍♂️‍➡️ Execute SQL scripts in the Auto_opsDataStore database
        shell: pwsh
        run: |
          $folders = Get-ChildItem -Path $env:PATH_RELEASE_IODS -Recurse -Directory | Sort-Object FullName

          foreach ($folder in $folders) {
            if ($folder.Name -notmatch '^\d') {
              Write-Output "Skipping folder (no number in name): $($folder.FullName)"
              continue
            }
            Write-Output "Processing folder: $($folder.FullName)"
            $sqlFiles = Get-ChildItem -Path $folder.FullName -Filter *.sql | Sort-Object Name

            foreach ($file in $sqlFiles) {            
              try {
                Write-Output "Executing $($file.FullName)..."
                $output = sqlcmd -S $env:SQL_SERVER_DATA -U $env:SQL_USER -P $env:SQL_PASSWORD -d $env:SQL_DATABASE_IODS -i $file.FullName 2>&1
                Write-Output "Result of $($file.Name):"
                if ($output -match 'Msg \d+, Level \d+, State \d+, Server .+, Line \d+') {
                  Write-Output "❗Error executing $($file.Name): $output"
                } 
                else {
                  Write-Output "✅ Successfully executed $($file.Name)"
                }
              } catch {
                Write-Error "❌ Failed to execute $($file.Name): $($_.Exception.Message)"
              }
            }
          }

      - name: 🏃‍♂️‍➡️ Execute SQL scripts in the GBDB database
        shell: pwsh
        run: |
          $folders = Get-ChildItem -Path $env:PATH_RELEASE_PROFICY -Recurse -Directory | Sort-Object FullName

          foreach ($folder in $folders) {
            if ($folder.Name -notmatch '^\d') {
              Write-Output "Skipping folder (no number in name): $($folder.FullName)"
              continue
            }
            Write-Output "Processing folder: $($folder.FullName)"
            $sqlFiles = Get-ChildItem -Path $folder.FullName -Filter *.sql | Sort-Object Name

            foreach ($file in $sqlFiles) {            
              try {
                Write-Output "Executing $($file.FullName)..."
                $output = sqlcmd -S $env:SQL_SERVER_DATA -U $env:SQL_USER -P $env:SQL_PASSWORD -d $env:SQL_DATABASE_PROFICY -i $file.FullName 2>&1
                Write-Output "Result of $($file.Name):"
                if ($output -match 'Msg \d+, Level \d+, State \d+, Server .+, Line \d+') {
                  Write-Output "❗Error executing $($file.Name): $output"
                } 
                else {
                  Write-Output "✅ Successfully executed $($file.Name)"
                }
              } catch {
                Write-Error "❌ Failed to execute $($file.Name): $($_.Exception.Message)"
              }
            }
          }

      - name: 🔄 Update Active Status in ScheduleTaskManager
        if: false
        shell: pwsh
        run: |
          try {
              Write-Output "📥 Reading JSON from environment variable..."

              Write-Output "Raw JSON content: $env:SCHEDULE_TASKS_JSON"

              # Get the JSON from the environment variable
              $jsonContentRaw = $env:SCHEDULE_TASKS_JSON
              Write-Output "Raw JSON length: $($jsonContentRaw.Length)"

              # Convert the JSON into a PowerShell object array
              $tasks = $jsonContentRaw | ConvertFrom-Json

              # Check if there are tasks in the JSON
              if (-not $tasks) {
                  Write-Output "⚠️ No tasks found in JSON."
                  exit 0
              }

              # Iterate through each JSON object and execute the UPDATE query
              foreach ($task in $tasks) {
                  $id = $task.Id
                  $active = [int]$task.Active  # Convert boolean to 0 or 1

                  Write-Output "🔄 Updating ScheduleTaskManager: Id=$id, Active=$active"

                  $updateQuery = "UPDATE ScheduleTaskManager SET Active = $active WHERE Id = $id"

                  # Execute the SQL query
                  $updateOutput = sqlcmd -S $env:SQL_SERVER_DATA -U $env:SQL_USER -P $env:SQL_PASSWORD -d $env:SQL_DATABASE_IODS -Q $updateQuery -h -1 -W

                  # Check for errors in the SQL execution
                  if ($updateOutput -match 'Msg \d+, Level \d+, State \d+, Server .+, Line \d+') {
                      Write-Error "❌ Error updating Id=" + $id + ": " + $updateOutput
                      exit 1
                  }
              }

              Write-Output "✅ All tasks updated successfully."

          } catch {
              Write-Error "❌ Failed to update ScheduleTaskManager: $($_.Exception.Message)"
              exit 1
          }

  api-deployment:
    runs-on: windows-latest
    needs: database-deployment
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: 📄 Load configuration from JSON
        shell: pwsh
        id: load_config
        run: |
          # read JSON file
          $config = Get-Content -Raw -Path "config.json" | ConvertFrom-Json

          # Check JSON file
          Write-Output "Config Loaded: $($config | ConvertTo-Json -Depth 3)"

          $RPT_SERVER = $config.RPT_SERVER
          $RPT_SERVER_USER = $config.RPT_SERVER_USER
          $RPT_SERVER_PASS = $config.RPT_SERVER_PASS
          $IODS_API = $config.IODS_API

          # Assign JSON values to environment variables
          Add-Content -Path $env:GITHUB_ENV -Value "RPT_SERVER=$RPT_SERVER"
          Add-Content -Path $env:GITHUB_ENV -Value "RPT_SERVER_USER=$RPT_SERVER_USER"
          Add-Content -Path $env:GITHUB_ENV -Value "RPT_SERVER_PASS=$RPT_SERVER_PASS"
          Add-Content -Path $env:GITHUB_ENV -Value "IODS_API=$API_IODS"

      - name: Debug - Show Loaded Variables
        shell: pwsh
        run: |
          Write-Output "RPT_SERVER: $env:RPT_SERVER"
          Write-Output "RPT_SERVER_USER: $env:RPT_SERVER_USER"
          Write-Output "RPT_SERVER_PASS: $env:RPT_SERVER_PASS"

      - name: Connect to RPT Server and Deploy API
        shell: pwsh
        run: |
          $securePassword = ConvertTo-SecureString "${{ env.RPT_SERVER_PASS }}" -AsPlainText -Force
          $credential = New-Object System.Management.Automation.PSCredential ("${{ env.RPT_SERVER_USER }}", $securePassword)

          Set-Item WSMan:\localhost\Client\TrustedHosts -Value * -Force
          Invoke-Command -ComputerName "${{ env.RPT_SERVER }}" -Credential $credential -ScriptBlock {
            Write-Host "🔹 Connecting to file server and downloading release files..."
                
            # Descargar archivos desde el servidor de archivos
            $networkPath = "\\brtc-mslab019.na.pg.com\mot\MES Releases\Release 2024.1\IODS\2024-09-10\DMO_4_4_2_22-RELEASE-SOA26"
            $localPath = "C:\Users\Public\Desktop\Deployment"
            if (-Not (Test-Path $localPath)) {
               New-Item -ItemType Directory -Path $localPath
            }

            Copy-Item -Path "$networkPath\*" -Destination $localPath -Recurse -Force
            Write-Host "✅ Files copied to $localPath"

            # Extraer ZIP de API
            Expand-Archive -Path "$localPath\DMO_4_4_2_22-RELEASE-SOA26-WebServer\API-iODS.zip" -DestinationPath "C:\inetpub\wwwroot\API-iODS" -Force

            # Abrir IIS y desplegar la API
            Import-Module WebAdministration
            Write-Host "🌍 Deploying API to IIS..."
            if (-Not (Test-Path IIS:\Sites\"Default Web Site\API-iODS")) {
              New-WebApplication -Name "API-iODS" -Site "Default Web Site" -PhysicalPath "C:\inetpub\wwwroot\API-iODS" -ApplicationPool "DefaultAppPool"
            }

            # Configurar Web.config
            Write-Host "🛠 Updating Web.config..."
            $webConfig = "C:\inetpub\wwwroot\API-iODS\Web.config"
            (Get-Content $webConfig) -replace "CNSG-MESDTA2BR.int.pg.com", "${{ env.DATA_SOURCE }}" | Set-Content $webConfig

            # Descargar y actualizar WhiteList.json
            Write-Host "📋 Updating WhiteList.json..."
            $whiteList = "C:\inetpub\wwwroot\API-iODS\WhiteList.json"
            Invoke-WebRequest -Uri "https://github.com/DMO/IODS/blob/main/Documentation/Install%20Documentation/whitelist.json" -OutFile $whiteList

            # Ejecutar AppPoolCreation.ps1
            Write-Host "⚙ Running AppPoolCreation.ps1..."
            powershell -ExecutionPolicy Bypass -File "$localPath\AppPoolCreation.ps1"

            # Configurar autenticación en IIS
            Write-Host "🔑 Configuring Authentication..."
            Set-WebConfigurationProperty -Filter "/system.webServer/security/authentication/anonymousAuthentication" -Name enabled -Value false -PSPath IIS:\ -Location "Default Web Site/API-iODS"
            Set-WebConfigurationProperty -Filter "/system.webServer/security/authentication/windowsAuthentication" -Name enabled -Value true -PSPath IIS:\ -Location "Default Web Site/API-iODS"

            # Verificar si la API está en ejecución
            Write-Host "✅ Checking API status..."
            $response = Invoke-WebRequest -Uri "https://CNSG-MESRPT2BR.int.pg.com/API-IODS/api/Filter/getlines" -UseBasicParsing
            if ($response.StatusCode -eq 200) {
                Write-Host "✅ API is running successfully!"
            } else {
                Write-Host "❌ API deployment failed!"
                exit 1
            }
          }
