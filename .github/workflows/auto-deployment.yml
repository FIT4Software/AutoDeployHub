name: iods-auto-deploy

on:
  push:
    branches: ["Task_9"]
  workflow_dispatch:

jobs:
  database-deployment:
    runs-on: windows-latest
    env:
      SQL_SERVER_DATA: ""
      SQL_USER: ""
      SQL_PASSWORD: ""
      SQL_DATABASE_IODS: ""
      PATH_RELEASE_IODS: ""
      SQL_DATABASE_PROFICY: ""
      PATH_RELEASE_PROFICY: ""
      SCHEDULE_TASKS_JSON: ""

    steps:
      - name: ‚öôÔ∏è Checkout code
        uses: actions/checkout@v3

      - name: üìÑ Load configuration from JSON
        shell: pwsh
        id: load_config
        run: |
          # read JSON file
          $config = Get-Content -Raw -Path "config.json" | ConvertFrom-Json

          # Check JSON file
          Write-Output "Config Loaded: $($config | ConvertTo-Json -Depth 3)"

          $SQL_SERVER_DATA = $config.SQL_SERVER_DATA
          $SQL_USER = $config.SQL_USER
          $SQL_PASSWORD = $config.SQL_PASSWORD
          $SQL_DATABASE_IODS = $config.SQL_DATABASE_IODS
          $PATH_RELEASE_IODS = $config.PATH_RELEASE_IODS
          $SQL_DATABASE_PROFICY = $config.SQL_DATABASE_PROFICY
          $PATH_RELEASE_PROFICY = $config.PATH_RELEASE_PROFICY

          # Assign JSON values to environment variables
          Add-Content -Path $env:GITHUB_ENV -Value "SQL_SERVER_DATA=$SQL_SERVER_DATA"
          Add-Content -Path $env:GITHUB_ENV -Value "SQL_USER=$SQL_USER"
          Add-Content -Path $env:GITHUB_ENV -Value "SQL_PASSWORD=$SQL_PASSWORD"
          Add-Content -Path $env:GITHUB_ENV -Value "SQL_DATABASE_IODS=$SQL_DATABASE_IODS"
          Add-Content -Path $env:GITHUB_ENV -Value "PATH_RELEASE_IODS=$PATH_RELEASE_IODS"
          Add-Content -Path $env:GITHUB_ENV -Value "SQL_DATABASE_PROFICY=$SQL_DATABASE_PROFICY"
          Add-Content -Path $env:GITHUB_ENV -Value "PATH_RELEASE_PROFICY=$PATH_RELEASE_PROFICY"

      - name: üìù Verify environment variables
        shell: pwsh
        run: |
          Write-Output "SQL_SERVER_DATA: $env:SQL_SERVER_DATA"
          Write-Output "SQL_USER: $env:SQL_USER"
          Write-Output "SQL_PASSWORD: $env:SQL_PASSWORD"
          Write-Output "SQL_DATABASE_IODS: $env:SQL_DATABASE_IODS"
          Write-Output "PATH_RELEASE_IODS: $env:PATH_RELEASE_IODS"  
          Write-Output "SQL_DATABASE_PROFICY: $env:SQL_DATABASE_PROFICY"
          Write-Output "PATH_RELEASE_PROFICY: $env:PATH_RELEASE_PROFICY"

      - name: üõ†Ô∏è Install SQL Server tools
        run: choco install sqlcmd

      - name: üîç Check Server Connection
        shell: pwsh
        run: |
          try {
            Write-Output "Checking database connection..."
            $output = sqlcmd -S $env:SQL_SERVER_DATA -U $env:SQL_USER -P $env:SQL_PASSWORD -Q "SELECT 1" 2>&1
            if ($output -match 'Msg \d+, Level \d+, State \d+, Server .+, Line \d+') {
              Write-Error "‚ùå Database connection failed: $output"
              exit 1
            }
            Write-Output "‚úÖ Database connection successful"
          } catch {
            Write-Error "‚ùå Failed to check database connection: $($_.Exception.Message)"
            exit 1
          }

      - name: üîåCheck Auto_opsDataStore Database Connection
        shell: pwsh
        run: |
          try {
            Write-Output "Checking Auto_opsDataStore database connection..."
            $output = sqlcmd -S $env:SQL_SERVER_DATA -U $env:SQL_USER -P $env:SQL_PASSWORD -d $env:SQL_DATABASE_IODS -Q "SELECT 1" 2>&1
            if ($output -match 'Msg \d+, Level \d+, State \d+, Server .+, Line \d+') {
              Write-Output "‚ùóDatabase connection failed: $output"
              exit 1
            }
            Write-Output "‚úÖ Auto_opsDataStore Database connection successful"
          } catch {
            Write-Output "‚ùóFailed to check Auto_opsDataStore database connection: $($_.Exception.Message)"
            exit 1
          }

      - name: üîåCheck GBDB Database Connection
        shell: pwsh
        run: |
          try {
            Write-Output "Checking GBDB database connection..."
            $output = sqlcmd -S $env:SQL_SERVER_DATA -U $env:SQL_USER -P $env:SQL_PASSWORD -d $env:SQL_DATABASE_PROFICY -Q "SELECT 1" 2>&1
            if ($output -match 'Msg \d+, Level \d+, State \d+, Server .+, Line \d+') {
              Write-Output "‚ùóDatabase connection failed: $output"
              exit 1
            }
            Write-Output "‚úÖ GBDB Database connection successful"
          } catch {
            Write-Output "‚ùóFailed to check GBDB database connection: $($_.Exception.Message)"
            exit 1
          }

      - name: üì• Save ScheduleTaskManager to JSON with BCP
        shell: pwsh
        run: |
          $jsonFile = Join-Path $env:GITHUB_WORKSPACE "ScheduleTaskManager.json"
          Write-Output "Exporting ScheduleTaskManager to JSON..."
          bcp "SELECT * FROM ScheduleTaskManager FOR JSON AUTO" queryout "$jsonFile" -S $env:SQL_SERVER_DATA -U $env:SQL_USER -P $env:SQL_PASSWORD -d $env:SQL_DATABASE_IODS -c

          $jsonContent = Get-Content -Path $jsonFile -Raw
          "SCHEDULE_TASKS_JSON=$jsonContent" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: üõ†Ô∏è Deactivate Tasks
        shell: pwsh
        run: |
              Write-Output "Deactivating tasks in ScheduleTaskManager..."
              $updateQuery = "UPDATE ScheduleTaskManager SET Active = 0"
              $updateOutput = sqlcmd -S $env:SQL_SERVER_DATA -U $env:SQL_USER -P $env:SQL_PASSWORD -d $env:SQL_DATABASE_IODS -Q $updateQuery
              
              if ($updateOutput -match 'Msg \d+, Level \d+, State \d+, Server .+, Line \d+') {
                  Write-Error "‚ùå Error deactivating tasks: $updateOutput"
                  exit 1
              }
              Write-Output "‚úÖ Tasks deactivated successfully"

      - name: üèÉ‚Äç‚ôÇÔ∏è‚Äç‚û°Ô∏è Execute SQL scripts in the Auto_opsDataStore database
        shell: pwsh
        run: |
          $folders = Get-ChildItem -Path $env:PATH_RELEASE_IODS -Recurse -Directory | Sort-Object FullName

          foreach ($folder in $folders) {
            if ($folder.Name -notmatch '^\d') {
              Write-Output "Skipping folder (no number in name): $($folder.FullName)"
              continue
            }
            Write-Output "Processing folder: $($folder.FullName)"
            $sqlFiles = Get-ChildItem -Path $folder.FullName -Filter *.sql | Sort-Object Name

            foreach ($file in $sqlFiles) {            
              try {
                Write-Output "Executing $($file.FullName)..."
                $output = sqlcmd -S $env:SQL_SERVER_DATA -U $env:SQL_USER -P $env:SQL_PASSWORD -d $env:SQL_DATABASE_IODS -i $file.FullName 2>&1
                Write-Output "Result of $($file.Name):"
                if ($output -match 'Msg \d+, Level \d+, State \d+, Server .+, Line \d+') {
                  Write-Output "‚ùóError executing $($file.Name): $output"
                } 
                else {
                  Write-Output "‚úÖ Successfully executed $($file.Name)"
                }
              } catch {
                Write-Error "‚ùå Failed to execute $($file.Name): $($_.Exception.Message)"
              }
            }
          }

      - name: üèÉ‚Äç‚ôÇÔ∏è‚Äç‚û°Ô∏è Execute SQL scripts in the GBDB database
        shell: pwsh
        run: |
          $folders = Get-ChildItem -Path $env:PATH_RELEASE_PROFICY -Recurse -Directory | Sort-Object FullName

          foreach ($folder in $folders) {
            if ($folder.Name -notmatch '^\d') {
              Write-Output "Skipping folder (no number in name): $($folder.FullName)"
              continue
            }
            Write-Output "Processing folder: $($folder.FullName)"
            $sqlFiles = Get-ChildItem -Path $folder.FullName -Filter *.sql | Sort-Object Name

            foreach ($file in $sqlFiles) {            
              try {
                Write-Output "Executing $($file.FullName)..."
                $output = sqlcmd -S $env:SQL_SERVER_DATA -U $env:SQL_USER -P $env:SQL_PASSWORD -d $env:SQL_DATABASE_PROFICY -i $file.FullName 2>&1
                Write-Output "Result of $($file.Name):"
                if ($output -match 'Msg \d+, Level \d+, State \d+, Server .+, Line \d+') {
                  Write-Output "‚ùóError executing $($file.Name): $output"
                } 
                else {
                  Write-Output "‚úÖ Successfully executed $($file.Name)"
                }
              } catch {
                Write-Error "‚ùå Failed to execute $($file.Name): $($_.Exception.Message)"
              }
            }
          }

      - name: üîÑ Update Active Status in ScheduleTaskManager
        shell: pwsh
        run: |
          try {
              Write-Output "üì• Reading JSON from environment variable..."

              Write-Output "Raw JSON content: $env:SCHEDULE_TASKS_JSON"

              # Get the JSON from the environment variable
              $jsonContentRaw = $env:SCHEDULE_TASKS_JSON
              Write-Output "Raw JSON length: $($jsonContentRaw.Length)"

              # Convert the JSON into a PowerShell object array
              $tasks = $jsonContentRaw | ConvertFrom-Json

              # Check if there are tasks in the JSON
              if (-not $tasks) {
                  Write-Output "‚ö†Ô∏è No tasks found in JSON."
                  exit 0
              }

              # Iterate through each JSON object and execute the UPDATE query
              foreach ($task in $tasks) {
                  $id = $task.Id
                  $active = [int]$task.Active  # Convert boolean to 0 or 1

                  Write-Output "üîÑ Updating ScheduleTaskManager: Id=$id, Active=$active"

                  $updateQuery = "UPDATE ScheduleTaskManager SET Active = $active WHERE Id = $id"

                  # Execute the SQL query
                  $updateOutput = sqlcmd -S $env:SQL_SERVER_DATA -U $env:SQL_USER -P $env:SQL_PASSWORD -d $env:SQL_DATABASE_IODS -Q $updateQuery -h -1 -W

                  # Check for errors in the SQL execution
                  if ($updateOutput -match 'Msg \d+, Level \d+, State \d+, Server .+, Line \d+') {
                      Write-Error "‚ùå Error updating Id=" + $id + ": " + $updateOutput
                      exit 1
                  }
              }

              Write-Output "‚úÖ All tasks updated successfully."

          } catch {
              Write-Error "‚ùå Failed to update ScheduleTaskManager: $($_.Exception.Message)"
              exit 1
          }

  api-deployment:
    runs-on: windows-latest
    needs: database-deployment
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Deploy API to IIS
        run: |
          echo "Desplegando API en IIS...."
